<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACinG4noZ5xYKGecWChnnFgoZ5xYKGecWChnnFgoZ5xYKGe
        cWChnnFgoZ5xYKGecWChnnFgoZ5xYKGecWChnnFgoZ5xYKGecWChnnFgoZ5xYKGecWChnnFgoZ5xYKGe
        cWChnnFgoZ5xYKGecWChnnFgoZ5xYKGecWChnnFgopxuJ6OfcLuinnD/op5w/6KecP+innD/op5w/6Ke
        cP+innD/op5w/6KecP+innD/op5w/6KecP+innD/op5w/6KecP+innD/op5w/6KecP+innD/op5w/6Ke
        cP+innD/op5w/6KecP+innD/op5w/6KecP+innD/op5w/6KecP+jn3C7oaFzC6WeciilnnIopZ5yKKWe
        ciilnnIopZ5yKKWeciilnnIopZ5yKKWeciilnnIopZ5yKKWeciilnnIopZ5yKKWeciilnnIopZ5yKKWe
        ciilnnIopZ5yKKWeciilnnIopZ5yKKWeciilnnIopZ5yKKWeciilnnIopZ5yKKGhcwsAAAAADCHDfg8p
        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
        DWR+VQT/flUE/35VBP9+VQT/jGQJ/6yIE3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAk2oNZH5VBP9+VQT/flUE/35VBP+BWAX/q4UTcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACTag1kflUE/35VBP9+VQT/flUE/35VBP+bdg6OAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJJrDSiPaQqcj2kKnI9pCpyPaQqcj2kKnJJvCkkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////AAAAAAAAAAAAAAAAgIGBAYCBgQGAgYEBgIGBAYCB
        gQGAgYEBgIGBAYCBgQGAgYEB/4GBAf+BgQH/gYEB/4GBAf//gQH//4EB//+BAf//gQH//4EB////Af//
        /wH///8B////Af///wH///////////////8=
</value>
  </data>
</root>