<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOF642DBKqxgoRpuYLEanRDROtXwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJEHDBOrpgsRqN8KEajeCxOroAAAqQMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEx7AQgoPpP0IDJ//CAyf/wgMn/8IDJ//DROsogAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHx++CA0TruMIDJ//CAyf/wgMn/8IDJ//CxCm6wAA
        zAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq1QYTH8PfEhy9/wwpsP8Ua9P/EUnB/wgM
        n/8IDaD/DhOuNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATIMOFEx/C/w0arv8RU8T/FWjU/woV
        pf8IDJ//DROrsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEyHDNBMfw/8TJMX/SLHv/9vl
        3P+MwOj/DC2y/wgMn/8ME62aAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMfw9QTH8P/F3Dd/8nj
        6P/M3d//FnPa/wgMn/8LEKXvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASIMNFEx/D/xQv
        yf9sx/X/+fr3/7nW5f8RS8P/CAyf/y0lheWSXBGvklwRr5JcEa+SXBGvklwRr5JcEa+SXBGvHCO29xMf
        w/8gh+X/8/r9/+Tp4v8dhOP/CAyf/woQpvUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0a
        yRMTHsP7Ex/D/xZj2f9Cqe//HoXn/wkPo/8IDJ//YUJM/5RfEf+UXxH/lF8R/5RfEf+UXxH/lF8R/5Rf
        Ef88M4r/Ex/D/xU/zv8xnOr/L5fu/xE9wP8IDJ//DBKp0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABMfwoATH8P/Ex/D/xMfw/8TH8P/Ehy+/yMhlP+zfyD/sXwa/650Dv+yfh//snwc/650
        Dv+zfyD/sXwa/5VmKv8YIr3/Ex/D/xMfw/8TH8P/Ex/C/w0TrPkLFrQtAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAD/ASQor3siJ7L+Ex/D/x0kuP9YRXL/qXET/7J9Hf+xehj/rnQO/7J8
        HP+xexn/rnQO/7J9Hf+xehj/rnQO/5BjMf81Mpv/FSDB/xUgwP8vK5f/dE47pQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArnQOkK50Dv+jbhr/rXQP/650Dv+udA7/rnQO/650
        Dv+udA7/rnQO/650Dv+udA7/rnQO/650Dv+udA7/rnQO/59oEP9/Thn/f04Y/4NQE/+OWhLhAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKx1EhyudA74rnQO/650Dv+2hy//tIIl/650
        Dv+2hy//tIIl/650Dv+2hSz/tYMn/650Dv+2hy//tIIl/650Dv+zhTL/kWMo/4NQE/+UazX/jWAn/4ZS
        E/6YZQAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArXQNmK50Dv+udA7/rnQO/651
        EP+udA//rnQO/651EP+udA//rnQO/651D/+udQ//rnQO/651EP+udA//rnQO/45aE/+DUBP/g1AT/4RS
        FP+DUBP/g1AT/5ZeEnMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKx3DyKudA76sXoY/7B5
        Fv+udA7/sXsZ/7B4FP+udA7/sXsZ/7B4FP+udA7/sXoY/7B5Fv+udA7/sXsZ/7B4FP+ZYxD/iVke/4ZV
        Gf+DUBP/iVke/4ZVGP+DUBP/kFsRzgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArnMOoK50
        Dv+0gSP/s38g/650Dv+0giX/sn4e/650Dv+0giX/sn4e/650Dv+0gSP/s38g/650Dv+0giX/qnYf/4RR
        E/+PYyv/i1wi/4NQE/+PYyv/ilwh/4NQE/+JVRL6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKty
        DSiudA78rnQO/650Dv+udA7/rnQO/650Dv+udA7/rnQO/650Dv+udA7/rnQO/6xyDv+jaw//mWIQ/49a
        Ev+FUhP/g1AT/4NQE/+DUBP/g1AT/4NQE/+DUBP/g1AT/4NQE/+XXxFNAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAArnUOqa50Dv+udA7/tYMo/7SBJP+udA7/tYQq/7OAIv+pcA//qHor/51uJP+LVxL/kGQs/45h
        KP+DUBP/kWYu/41fJv+DUBP/kWcw/41fJv+DUBP/kWcw/4xeJf+DUBP/g1AT/5JdErYAAAAAAAAAAAAA
        AAAAAAAAAAAAAK12EC+udA7+rnQO/650Dv+veBP/p3ET/5xlEP+VYhf/iVgV/4NQE/+GVRn/hVMW/4NQ
        E/+GVRj/hVMW/4NQE/+GVRn/hVMW/4NQE/+HVhn/hVIV/4NQE/+HVhn/hVIV/4NQE/+DUBP/jFcS8QAA
        AAAAAAAAAAAAAAAAAAAAAAAAqnIOtKNrD/+ZYhD/j1oS/4ZSE/+DUBP/g1AT/4NQE/+DUBP/g1AT/4NQ
        E/+DUBP/g1AT/4NQE/+DUBP/g1AT/4NQE/+DUBP/g1AT/4NQE/+DUBP/g1AT/4NQE/+DUBP/g1AT/4NQ
        E/+DUBP/mWQNJgAAAAAAAAAAAAAAAAAAAACeZQ0olWMRLpVjES49k7CkMZvH/zGbx/8xm8f/MZvH/zGb
        x/8ul8H/JoWx/yWEr/8lhK//JYSv/zCJrMAxm8f/MZvH/zCaxf8oirX/JYSv/yWEr/9DhJKAlWMRLnZO
        Fk1QPB7/YEQbgZVjES6YZQAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqn75AaqO//Gqjv/xqo
        7/8aqO//F6Lp/w6N1f8Ni9P/DYvT/w2L0/8Ni9P/EZXeshqo7/8Zp+7/EZPa/w2L0/8Ni9P/DYvT/xOY
        3mQAAAAAPzIfKEE0If9BNSFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGqfvkBqo
        7/8aqO//Gqjv/xei6f8OjdX/DYvT/w2L0/8Ni9P/DYvT/w2L0/8Rld6yGafu/xGT2v8Ni9P/DYvT/w2L
        0/8Ni9P/E5jeZAAAAAA/Mh8oQjch/2qCF6l/qhN8f6oTfH+qE3x/qhN8gK0TTwAAAAAAAAAAAAAAAAAA
        AAAap++QGqjv/xqo7/8Xoun/Do3V/w2L0/8Ni9P/DYvT/w2L0/8Ni9P/DYvT/xGW3rETl9/fEJHZ7xCR
        2e8QkdnvEJHZ7xCR2e8Rl95NAAAAAEtEGyV+ngv/gJ0H/4CdB/+AnQf/gJ0H/4CdB/+AnQf/gKcPygAA
        AAAAAAAAAAAAABqn75AaqO//F6Lp/w6N1f8Ni9P/DYvT/w2L0/8Ni9P/DYvT/w2L0/8Ni9P/EZXdrwAA
        AAAbqe4tFJri0hKa5BwAAAAAAAAAAAAAAAAAAAAAgLUXSYCxFv+AsRb/gLEW/4CxFv+AsRb/gLEW/4Cx
        Fv+AshbwAAAAAAAAAAAAAAAAGqfvkBei6f8OjdX/DYvT/w2L0/8Ni9P/DYvT/w2L0/8Ni9P/DYvT/w2L
        0/8Rld2vG6nuLRqo7+oSlt3/EJDY8xKa5BwAAAAAAAAAAAAAAAB/1SoGgMAi4oDAIv+AwCL/gMAi/4DA
        Iv+AwCL/gMAi/4DAIpgAAAAAAAAAAAAAAAAXn+eWD4/X+w6N1v0Ojdb9Do3W/Q6N1v0Ojdb9Do3W/Q6N
        1v0Ojdb9Do3W/RSb4rIaqO/qGqjv/xKW3f8Ni9P/EJDY8xOg4xsAAAAAAAAAAAAAAACNxRsJgcAjVoHB
        ImCBwSJggcEiYIHBImCAvyJBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAbqe4tGqjv6hqo7/8aqO//Epbd/w2L0/8Ni9P/EJDY8hOc4hoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABqo770aqO//Gqjv/xqo7/8Slt3/DYvT/w2L0/8Ni9P/EZTduQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGaXyFBqp79EaqO//Gqjv/xKW3f8Ni9P/DYvT/xCS
        2twAf/8EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGq3yExqo79AaqO//Epbd/w2L
        0/8Qk9vbAH//BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGq3yExqo
        788Slt3/EpTb2gB//wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAG6nxEhSb4qAAf/8EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////B/4H/gP8A/wB/AP8AfwD/AAAA/wAAAP+AAAD/gAAB/8AAAf+AA
        AD/gAAA/wAAAP8AAAD+AAAAfgAAAHwAAAB8AAAAPAAAAD+AAAj/gAAIB4AACAOABHgDgAA4A4AAHAf/4
        A///+AP///gD///8B////g////8f//////8=
</value>
  </data>
</root>